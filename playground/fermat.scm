(define (smallest-divisor n)
  (define (next n)
    (if (= n 2) 3 (+ n 2)))
  (define (iter x)
    (cond ((> (square x) n) n)
          ((= (remainder n x) 0) x)
          (else (iter (next x)))))
  (iter 2))

(define (prime? n)
  (= (smallest-divisor n) n))

; (define (prime? n)
;   (fast-prime? n 1000))

(define (fast-prime? n times)
  (cond ((= times 0) #t)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else #f)))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
        (else (remainder (* base (expmod base (- exp 1) m)) m))))

(define (timed-prime-test n)
  (define (start-prime-test n start-time)
    (if (prime? n)
      (report-prime (- (runtime) start-time))))
  (define (report-prime elapsed-time)
    (display " *** ")
    (display elapsed-time))
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (search-for-primes a)
  (define (iter n count)
    (cond ((= count 0) (newline) #t)
          ((prime? n) (timed-prime-test n) (iter (+ n 1) (- count 1)))
          (else (iter (+ n 1) count))))
  (iter a 3))

(search-for-primes 1000)
(search-for-primes 10000)
(search-for-primes 100000)
(search-for-primes 1000000)
(search-for-primes 10000000)
(search-for-primes 100000000)
(search-for-primes 1000000000)
(search-for-primes 10000000000)
(search-for-primes 100000000000)
(search-for-primes 1000000000000)
